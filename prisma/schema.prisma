generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  email          String         @unique
  password       String?
  name           String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  savedCompanies SavedCompany[]
  searches       Search[]
  subscription   Subscription?

  @@map("users")
}

model Plan {
  id             String         @id @default(uuid())
  name           String         @unique
  price          Float
  interval       String
  features       String[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  razorpayPlanId String         @unique
  subscriptions  Subscription[]

  @@map("plans")
}

model Search {
  id        String   @id @default(uuid())
  userId    String
  company   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("searches")
}

model Subscription {
  id                     String             @id @default(uuid())
  userId                 String             @unique
  planId                 String
  status                 SubscriptionStatus
  currentPeriodStart     DateTime
  currentPeriodEnd       DateTime
  cancelAtPeriodEnd      Boolean            @default(false)
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  razorpaySubscriptionId String?            @unique
  razorpayCustomerId     String?
  plan                   Plan               @relation(fields: [planId], references: [id])
  user                   User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model SavedCompany {
  id        String   @id @default(uuid())
  userId    String
  company   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("saved_companies")
}

model Payment {
  id                String        @id @default(cuid())
  userId            String
  subscriptionId    String?
  amount            Int
  currency          String        @default("INR")
  status            PaymentStatus
  razorpayPaymentId String?       @unique
  razorpayOrderId   String?
  razorpaySignature String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@map("payments")
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
  TRIALING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
